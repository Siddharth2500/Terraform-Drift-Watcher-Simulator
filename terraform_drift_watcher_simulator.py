# -*- coding: utf-8 -*-
"""Terraform Drift Watcher Simulator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y1sEyvWd3UiDWmKNrdVAn4E3hqiXSSDK
"""

# Project 3 â€” Terraform Drift Watcher (Colab-friendly simulator)
# This does NOT require Terraform binary, it simulates drift detection using JSON files.

import json, random, time

class DriftWatcher:
    """
    Simulates detection of infrastructure drift:
    - Compares desired Terraform state (JSON export) with "live cloud state" (JSON)
    - Detects missing, changed, or extra resources
    """

    def __init__(self, tfstate_file, cloudstate_file):
        self.tfstate_file = tfstate_file
        self.cloudstate_file = cloudstate_file

    def load(self, path):
        with open(path, "r") as f:
            return json.load(f)

    def check_drift(self):
        tf = self.load(self.tfstate_file)["resources"]
        cloud = self.load(self.cloudstate_file)["resources"]

        drift = {"missing": [], "changed": [], "extra": []}

        tf_map = {r["name"]: r for r in tf}
        cloud_map = {r["name"]: r for r in cloud}

        # Missing
        for name in tf_map:
            if name not in cloud_map:
                drift["missing"].append(name)

        # Extra
        for name in cloud_map:
            if name not in tf_map:
                drift["extra"].append(name)

        # Changed
        for name in tf_map:
            if name in cloud_map and tf_map[name]["config"] != cloud_map[name]["config"]:
                drift["changed"].append(name)

        return drift


# --- Demo setup ---
desired = {
    "resources": [
        {"name": "vm-1", "type": "aws_instance", "config": {"size": "t2.micro"}},
        {"name": "db-1", "type": "aws_rds", "config": {"engine": "postgres"}}
    ]
}

live = {
    "resources": [
        {"name": "vm-1", "type": "aws_instance", "config": {"size": "t2.medium"}},  # drifted
        {"name": "lb-1", "type": "aws_lb", "config": {"type": "public"}},           # extra
        # db-1 missing
    ]
}

with open("tfstate.json", "w") as f: json.dump(desired, f, indent=2)
with open("cloud.json", "w") as f: json.dump(live, f, indent=2)

watcher = DriftWatcher("tfstate.json", "cloud.json")
print("Detected Drift:", json.dumps(watcher.check_drift(), indent=2))